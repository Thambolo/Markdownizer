name: CI

on:
  push: {}
  pull_request: {}
  workflow_dispatch:

jobs:
  test:
    name: Test Python Agent
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./agent
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest fastapi[all] httpx

      - name: Run tests with pytest
        working-directory: ./agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-dummy-key-for-ci' }}
        run: |
          pytest -q

  # Linting checks intentionally removed from CI (kept for local pre-commit)

  extension-check:
    name: Check Browser Extension
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate manifest.json
        run: |
          cd extension/src
          python -m json.tool manifest.json > /dev/null
          echo "✓ manifest.json is valid"

      - name: Check for required files
        run: |
          cd extension
          required_files=(
            "src/manifest.json"
            "src/sw.js"
            "src/content.js"
            "src/options.html"
            "src/options.js"
            "src/css/options.css"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "✗ Missing required file: $file"
              exit 1
            fi
          done

          echo "✓ All required extension files present"

      - name: Check JavaScript syntax
        run: |
          cd extension/src
          for jsfile in *.js; do
            node --check "$jsfile"
            echo "✓ $jsfile syntax valid"
          done

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./agent
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore Playwright browser cache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/ms-playwright
          # Use the .playwright-version file so Playwright cache invalidates when its version changes
          key: ${{ runner.os }}-playwright-${{ hashFiles('.playwright-version') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # Project has no package.json; use .playwright-version as the cache anchor for JS-related caches
          key: ${{ runner.os }}-npm-${{ hashFiles('.playwright-version') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Playwright browsers
        working-directory: ./agent
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}/ms-playwright
        run: |
          playwright install chromium --with-deps

      - name: Create test .env file
        working-directory: ./agent
        run: |
          cp .env.example .env || true
          echo "OPENAI_API_KEY=sk-test-dummy-key" >> .env

      - name: Test agent imports
        working-directory: ./agent
        env:
          OPENAI_API_KEY: sk-test-dummy-key
        run: |
          python -c "from app import fetcher, extractor, comparator; print('✓ Agent tools imported successfully')"

      - name: Validate protocol.json
        run: |
          python -m json.tool shared/protocol.json > /dev/null
          echo "✓ protocol.json is valid"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, extension-check, integration]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Python tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code linting: skipped (not run in CI)" >> $GITHUB_STEP_SUMMARY
          echo "- Extension check: ${{ needs.extension-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration test: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
