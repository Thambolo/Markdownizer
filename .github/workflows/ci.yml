name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python Agent
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./agent
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        working-directory: ./agent
        run: |
          playwright install chromium --with-deps

      - name: Run tests with pytest
        working-directory: ./agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-dummy-key-for-ci' }}
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./agent/coverage.xml
          flags: agent
          name: agent-coverage
        continue-on-error: true

  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: Run ruff
        working-directory: ./agent
        run: |
          ruff check . --output-format=github
        continue-on-error: true

      - name: Check code formatting with black
        working-directory: ./agent
        run: |
          black --check .
        continue-on-error: true

      - name: Check import sorting with isort
        working-directory: ./agent
        run: |
          isort --check-only .
        continue-on-error: true

  extension-check:
    name: Check Browser Extension
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate manifest.json
        run: |
          cd extension/src
          python -m json.tool manifest.json > /dev/null
          echo "✓ manifest.json is valid"

      - name: Check for required files
        run: |
          cd extension
          required_files=(
            "src/manifest.json"
            "src/sw.js"
            "src/content.js"
            "src/options.html"
            "src/options.js"
            "src/css/options.css"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "✗ Missing required file: $file"
              exit 1
            fi
          done
          
          echo "✓ All required extension files present"

      - name: Check JavaScript syntax
        run: |
          cd extension/src
          for jsfile in *.js; do
            node --check "$jsfile"
            echo "✓ $jsfile syntax valid"
          done

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./agent
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test .env file
        working-directory: ./agent
        run: |
          cp .env.example .env
          echo "OPENAI_API_KEY=sk-test-dummy-key" >> .env

      - name: Test agent imports
        working-directory: ./agent
        env:
          OPENAI_API_KEY: sk-test-dummy-key
        run: |
          python -c "from app import fetcher, extractor, comparator; print('✓ Agent tools imported successfully')"

      - name: Validate protocol.json
        run: |
          python -m json.tool shared/protocol.json > /dev/null
          echo "✓ protocol.json is valid"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, lint, extension-check, integration]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Python tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Extension check: ${{ needs.extension-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration test: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
